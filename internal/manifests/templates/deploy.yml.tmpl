apiVersion: "v1"
kind: "Service"
metadata:
  name: {{.Name}}
  namespace: {{.Kubevela.NameSpace}}
  annotations:
    "kubefoundry/app": "{{.Name}}"
    {{- if .Git }}
    "kubefoundry/vsc": "{{.Git}}"
    {{- end}}
    "kubefoundry/date": "{{.DateHuman}}"
    "kubefoundry/commit": "{{.Ref}}"
    "kubefoundry/team": "{{.Team}}"
    {{- range $i, $a := .Apps}}
    "kubefoundry/version.{{$i}}": "{{$a.Version}}"
    {{- if $a.Routes }}{{range $j, $r := $a.Routes}}
    "kubefoundry/route.{{$i}}.{{$j}}": "{{$r}}"
    {{end}}{{- end}}
    {{- end}}
spec:
  selector:
    app: {{.Name}}
  ports:
  {{- range $i, $a := .Apps}}
  - name: "http-{{$a.Name}}"
    port: 80
    targetPort: {{$a.Port}}
  {{end}}

---
apiVersion: "networking.istio.io/v1beta1"
kind: "VirtualService"
metadata:
  name: {{.Name}}
  namespace: {{.Kubevela.NameSpace}}
  annotations:
    "kubefoundry/app": "{{.Name}}"
    {{- if .Git }}
    "kubefoundry/vsc": "{{.Git}}"
    {{- end}}
    "kubefoundry/date": "{{.DateHuman}}"
    "kubefoundry/commit": "{{.Ref}}"
    "kubefoundry/team": "{{.Team}}"
    {{- range $i, $a := .Apps}}
    "kubefoundry/version.{{$i}}": "{{$a.Version}}"
    {{- if $a.Routes }}{{range $j, $r := $a.Routes}}
    "kubefoundry/route.{{$i}}.{{$j}}": "{{$r}}"
    {{end}}{{- end}}
    {{- end}}
spec:
    gateways: [
    - "istio-system/private"
    - "istio-system/public"
    - "mesh"
    http:
    - route:
      - destination:
        host: "{{.Name}}"
    {{- range $i, $a := .Apps}}
    hosts:
    {{- if $a.Routes }}{{range $j, $r := $a.Routes}}
    - "{{$r}}"
    {{end}}
    {{- end}}
    {{- end}}

---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: {{.Name}}
  namespace: {{.Kubevela.NameSpace}}
  labels:
    app: {{.Name}}
  annotations:
    "kubefoundry/app": "{{.Name}}"
    {{- if .Git }}
    "kubefoundry/vsc": "{{.Git}}"
    {{- end}}
    "kubefoundry/date": "{{.DateHuman}}"
    "kubefoundry/commit": "{{.Ref}}"
    "kubefoundry/team": "{{.Team}}"
    {{- range $i, $a := .Apps}}
    "kubefoundry/version.{{$i}}": "{{$a.Version}}"
    {{- if $a.Routes }}{{range $j, $r := $a.Routes}}
    "kubefoundry/route.{{$i}}.{{$j}}": "{{$r}}"
    {{end}}{{- end}}
    {{- end}}
spec:
  {{range $i, $a := .Apps}}
  serviceName: {{$.Name}}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "{{$.Name}}"
  replicas: {{$a.Instances}}
  template:
    metadata: {
      annotations:
        "kubefoundry/app": "{{$.Name}}"
        {{- if $.Git }}
        "kubefoundry/vsc": "{{$.Git}}"
        {{- end}}
        "kubefoundry/date": "{{$.DateHuman}}"
        "kubefoundry/commit": "{{$.Ref}}"
        "kubefoundry/team": "{{$.Team}}"
        "kubefoundry/version.{{$i}}": "{{$a.Version}}"
        {{- if $a.Routes }}{{range $j, $r := $a.Routes}}
        "kubefoundry/route.{{$i}}.{{$j}}": "{{$r}}"
        {{end}}{{- end}}
      labels:
        "sidecar.istio.io/inject": "true"
        "app": "{{$.Name}}"
        "version": "v1"
        "kubefoundry/app": "{{$a.Name}}"
    spec:
      containers:
      - name: "{{$a.Name}}"
        image: "{{$a.Image}}"
        imagePullPolicy: Always
        command: ["/run.py"]
        args: ["--cf-k8s-env", "/etc/kubefoundry-instance-info"]
        {{- if $a.Resources }}
        resources:
          limits:
            cpu: {{$a.Resources.CPU}}
            memory: {{$a.Resources.Mem}}
            "ephemeral-storage": {{$a.Resources.Disk}}
          requests:
            cpu: {{$a.Resources.CPU}}
            memory: {{$a.Resources.Mem}}
            "ephemeral-storage": {{$a.Resources.Disk}}
        {{- end}}
        ports:
        - name: "http-{{$a.Name}}"
          containerPort: {{$a.Port}}
        env:
        - name: "VCAP_PLATFORM_OPTIONS"
          value: "{}"
        - name: "VCAP_SERVICES"
          value: "{}"
        - name: "VCAP_APP_HOST"
          value: "0.0.0.0"
        {{- range $k, $v := $a.Env }}    
        - name: "{{$k}}"
          value: "{{$v}}"
        {{end}}
        volumeMounts:
        - name: "podinfo-kubefoundry"
          mountPath: "/etc/kubefoundry-instance-info"
        startupProbe:
          exec:
            command: ["/healthcheck.sh"]
          initialDelaySeconds: 2
          failureThreshold: 1
          periodSeconds: 2
        livenessProbe:
          exec:
            command: ["/healthcheck.sh"]
          failureThreshold: 1
          periodSeconds: 30
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "katee-default"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "dedicated"
                operator: "In"
                values:
                - "katee-default"
      volumes:
      - name: "podinfo-kubefoundry"
        downwardAPI:
          items:
            - path: "CPU_LIMIT"
              resourceFieldRef:
                containerName: "{{$.Name}}"
                resource: "limits.cpu"
                divisor: "1m"
            - path: "MEMORY_LIMIT"
              resourceFieldRef:
                containerName: "{{$.Name}}"
                resource: "limits.memory"
                divisor: "1Mi"
            - path: "INSTANCE_NAMESPACE"
              fieldRef:
                fieldPath: "metadata.namespace"
            - path: "INSTANCE_IP"
              fieldRef:
                fieldPath: "metadata.annotations['cni.projectcalico.org/podIP']"
            - path: "INSTANCE_NAME"
              fieldRef:
                fieldPath: "metadata.labels['app.oam.dev/component']"
            - path: "INSTANCE_GUID"
              fieldRef:
                fieldPath: "metadata.uid"
            - path: "labels"
              fieldRef:
                fieldPath: "metadata.labels"
            - path: "annotations"
              fieldRef:
                fieldPath: "metadata.annotations"
{{end}}