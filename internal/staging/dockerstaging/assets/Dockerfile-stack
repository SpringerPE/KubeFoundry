# Docker CF base container for Kubefoundry
# Build it with: docker build -t app .
# Run like: docker run -ti --rm  -p 8080:8080 app

# https://github.com/buildpacks/packs/blob/main/cf/app.go
# https://github.com/tonistiigi/buildkit-pack

# DOCKER_BUILDKIT=1 docker build --progress=plain  -t java .

# You need to pass an alternative base image, all resources are already there
ARG BASE
FROM "${BASE}" AS staging

ARG APP_NAME
ARG APP_CREATED="now"
ARG APP_VERSION="latest"
ARG APP_HOME="/home/vcap"
ARG APP_PORT=8080
ARG CF_API="https://api.cf"
ARG CF_ORG="undefined"
ARG CF_SPACE="undefined"
ARG CF_VCAP_SERVICES="{}"
ARG CF_MANIFEST=manifest.yml
ARG CF_VARS=vars.yml
ARG CONTEXT_DIR=/app
ARG BUILDPACKS_DIR=/buildpacks


LABEL org.opencontainers.image.ref.name="${APP_NAME}"
LABEL org.opencontainers.image.created="${APP_CREATED}"
LABEL org.opencontainers.image.version="${APP_VERSION}"
LABEL org.opencontainers.image.vendor="Springer Nature EE"
LABEL org.opencontainers.image.description="CloudFoundry staging process in Docker"

LABEL com.springernature.kubefoundry.org="${CF_ORG}"
LABEL com.springernature.kubefoundry.team="${CF_SPACE}"
LABEL com.springernature.kubefoundry.application.name="${APP_NAME}"
LABEL com.springernature.kubefoundry.application.version="${APP_VERSION}"
LABEL com.springernature.kubefoundry.application.date="${APP_CREATED}"

# Env vars needed:
# CF_INSTANCE_ADDR
# CF_INSTANCE_INTERNAL_IP
# CF_INSTANCE_IP
# CF_INSTANCE_PORT
# CF_INSTANCE_PORTS
# CF_STACK
# HOME
# LANG
# MEMORY_LIMIT
# PATH
# PWD
# USER
# VCAP_APPLICATION
# VCAP_SERVICES
# VCAP_PLATFORM_OPTIONS
# CF_SYSTEM_CERT_PATH="/etc/cf-system-certificates"
# CF_INSTANCE_CERT="/etc/cf-instance-credentials/instance.crt"
# CF_INSTANCE_KEY="/etc/cf-instance-credentials/instance.key"


ENV HOME=${APP_HOME} \
    LANG=C.UTF-8 \
    USER=root \
    TMPDIR=/home/vcap/tmp \
    DEPS_DIR=/home/vcap/deps \
    PORT=${APP_PORT}
    APP_NAME=${APP_NAME} \
    APP_VERSION=${APP_VERSION} \
    APP_PORT=${APP_PORT} \
    CF_API=${CF_API} \
    CF_ORG=${CF_ORG} \
    CF_SPACE=${CF_SPACE} \
    CF_VCAP_SERVICES=${CF_VCAP_SERVICES}


# https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#app-system-env
# If not defined here, these env vars are defined in the run script
# CF_INSTANCE_IP
# CF_INSTANCE_PORT
# CF_INSTANCE_ADDR
# CF_INSTANCE_GUID=
# CF_INSTANCE_INDEX
# CF_INSTANCE_INTERNAL_IP
# CF_INSTANCE_PORTS
# DATABASE_URL
# HOME
# INSTANCE_INDEX
# INSTANCE_GUID
# LANG
# MEMORY_LIMIT
# PATH
# PORT
# PWD
# TMPDIR
# USER
# VCAP_APPLICATION
# VCAP_SERVICES
# VCAP_PLATFORM_OPTIONS
# CF_SYSTEM_CERT_PATH="/etc/cf-system-certificates"
# CF_INSTANCE_CERT="/etc/cf-instance-credentials/instance.crt"
# CF_INSTANCE_KEY="/etc/cf-instance-credentials/instance.key"

WORKDIR ${APP_HOME}

# Add buildpacks
VOLUME ${BUILDPACKS_DIR}

# Application
COPY app ${CONTEXT_DIR}

# Run staging
RUN /staging.py \
    --home ${APP_HOME} \
    --contex ${CONTEXT_DIR} \
    --cache ${BUILDPACKS_DIR}/cache \
    --manifest ${CF_MANIFEST} \
    --manifest-vars ${CF_VARS} \
    --link-context \
    --clean --clean \
    ${BUILDPACKS_DIR}

# Note: Docker healthchecks are not used by K8S!
# This is only useful for platforms based in Docker (or supporting the healthchecks!)
# BUT: In K8S is possible to target a command as a healthcheck, so you only need to
# target /healtcheck.sh and check the return code (in the same way as Docker)
HEALTHCHECK \
    --interval=30s \
    --timeout=10s \
    --start-period=60s \
    --retries=3 \
    CMD /healthcheck.sh

EXPOSE ${APP_PORT}
CMD ["/run.py", "--cf-fake-env", "--manifest-env"]
